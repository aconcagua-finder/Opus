generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String     @id @default(uuid())
  email                     String     @unique
  passwordHash              String     @map("password_hash")
  emailVerified             Boolean    @default(false) @map("email_verified")
  emailVerificationToken    String?    @map("email_verification_token")
  emailVerificationExpiresAt DateTime? @map("email_verification_expires_at")
  
  // Profile
  username                  String?    @unique
  displayName               String?    @map("display_name")
  avatarUrl                 String?    @map("avatar_url")
  
  // Status
  isActive                  Boolean    @default(true) @map("is_active")
  isBanned                  Boolean    @default(false) @map("is_banned")
  banReason                 String?    @map("ban_reason")
  bannedUntil               DateTime?  @map("banned_until")
  
  // Metadata
  metadata                  Json       @default("{}")
  
  // Timestamps
  createdAt                 DateTime   @default(now()) @map("created_at")
  updatedAt                 DateTime   @updatedAt @map("updated_at")
  deletedAt                 DateTime?  @map("deleted_at")
  lastLoginAt               DateTime?  @map("last_login_at")
  
  // Relations
  sessions                  Session[]
  passwordResetTokens       PasswordResetToken[]
  authAttempts              AuthAttempt[]
  
  @@map("users")
  @@index([email])
  @@index([username])
  @@index([deletedAt])
}

model Session {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  refreshToken    String    @unique @map("refresh_token")
  
  // Session info
  ipAddress       String?   @map("ip_address")
  userAgent       String?   @map("user_agent")
  deviceInfo      Json      @default("{}") @map("device_info")
  
  // Expiration
  expiresAt       DateTime  @map("expires_at")
  lastActivityAt  DateTime  @default(now()) @map("last_activity_at")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  revokedAt       DateTime? @map("revoked_at")
  revokedReason   String?   @map("revoked_reason")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  token      String    @unique
  expiresAt  DateTime  @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
  @@index([token])
  @@index([userId])
}

model AuthAttempt {
  id            String    @id @default(uuid())
  email         String
  userId        String?   @map("user_id")
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  success       Boolean
  failureReason String?   @map("failure_reason")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("auth_attempts")
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
}